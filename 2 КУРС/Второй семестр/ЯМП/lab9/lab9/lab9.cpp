#include <iostream>
#include <time.h>
#define N 1000000 // размер таблицы

using namespace std;
long long iteration = 0; // счетчик итераций
int lasthash = 0; // индекс ближайшего справа пустого места, куда будет добавлен элемент в случае коллизии
int m = N / 10; // делитель
int table[N]; // хеш-таблица

// Функция инициализации таблицы
void tableNULL()
{
    for (int i = 0; i < N; i++)
    {
        table[i] = NULL;
    }
}

// Функция добавления элементов в таблицу и подсчета затрат
void Task()
{
    tableNULL(); // инициализируем таблицу
    for (int i = 0; i < (N / 2); i++) // добавляем N/2 элеметов
    {
        int hash = i % m; // вычисляем хеш методом деления с остатком
        int value = rand() % 20000 - 10000; // генерируем значение элемента
        iteration++; // + 1 операция сравнения
        if (table[hash] != NULL) // если клетка с полученным хешем не пустая
        {
            // то добавляем новый элемент на ближайшее справа пустое место
            table[lasthash] = value;
            lasthash++; // увеличиваем индекс ближайшего справа пустого места, так как текущее уже занято
        }
        else // иначе (позиция не занята)
        {
            // добавляем элемент согласно полученному хешу
            table[hash] = value;
            iteration++; // + 1 операция сравнения
            if (hash == lasthash) // случай, если элемент занимает позицию ближайшего справа пустого места
            {
                lasthash++; // увеличиваем индекс, так как текущая позиция уже занята
            }
        }
    }
}

int main()
{
    setlocale(0, "");
    srand(time(NULL));
    Task();
    cout << "Количество итераций: " << iteration << endl;
    return 0;
}